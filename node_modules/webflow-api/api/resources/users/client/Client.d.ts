/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Users {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Users {
    protected readonly _options: Users.Options;
    constructor(_options: Users.Options);
    /**
     * Get a list of users for a site <br><br> Required scope | `users:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.UsersListRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.users.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, request?: Webflow.UsersListRequest, requestOptions?: Users.RequestOptions): Promise<Webflow.UserList>;
    /**
     * Get a User by ID <br><br> Required scope | `users:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} userId - Unique identifier for a User
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.users.get("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741")
     */
    get(siteId: string, userId: string, requestOptions?: Users.RequestOptions): Promise<Webflow.User>;
    /**
     * Delete a User by ID <br><br> Required scope | `users:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} userId - Unique identifier for a User
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.users.delete("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741")
     */
    delete(siteId: string, userId: string, requestOptions?: Users.RequestOptions): Promise<void>;
    /**
     * Update a User by ID <br><br> Required scope | `users:write`
     *
     * <aside class="notice">The <code>email</code> and <code>password</code> fields cannot be updated using this endpoint</aside>
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {string} userId - Unique identifier for a User
     * @param {Webflow.UsersUpdateRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.users.update("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741", {
     *         data: {
     *             name: "Some One",
     *             acceptPrivacy: false,
     *             acceptCommunications: false
     *         },
     *         accessGroups: ["webflowers", "platinum", "free-tier"]
     *     })
     */
    update(siteId: string, userId: string, request?: Webflow.UsersUpdateRequest, requestOptions?: Users.RequestOptions): Promise<Webflow.User>;
    /**
     * Create and invite a user with an email address. The user will be sent and invite via email, which they will need to accept in order to join paid Access Groups. <br><br> Required scope | `users:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.UsersInviteRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.ForbiddenError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.ConflictError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.users.invite("580e63e98c9a982ac9b8b741", {
     *         email: "some.one@home.com",
     *         accessGroups: ["webflowers"]
     *     })
     */
    invite(siteId: string, request: Webflow.UsersInviteRequest, requestOptions?: Users.RequestOptions): Promise<Webflow.User>;
    protected _getAuthorizationHeader(): Promise<string>;
}
