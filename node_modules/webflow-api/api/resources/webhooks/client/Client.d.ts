/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Webflow from "../../../index";
export declare namespace Webhooks {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options: Webhooks.Options);
    /**
     * List all App-created Webhooks registered for a given site </br></br> Required scope | `sites:read`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.webhooks.list("580e63e98c9a982ac9b8b741")
     */
    list(siteId: string, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.WebhookList>;
    /**
     * Create a new Webhook, to be notified when Webflow resources change. Limit of 75 registrations per `triggerType`, per site. <blockquote class="callout callout_info" theme="ðŸ“˜">Access to this endpoint requires a bearer token from a <a href="https://developers.webflow.com/data/docs/getting-started-data-clients">Data Client App</a>.</blockquote> Required scope | `sites:write`
     *
     * @param {string} siteId - Unique identifier for a Site
     * @param {Webflow.Webhook} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.webhooks.create("580e63e98c9a982ac9b8b741", {
     *         id: "582266e0cd48de0f0e3c6d8b",
     *         triggerType: "form_submission",
     *         url: "https://webhook.site/7f7f7f7f-7f7f-7f7f-7f7f-7f7f7f7f7f7f",
     *         workspaceId: "4f4e46fd476ea8c507000001",
     *         siteId: "562ac0395358780a1f5e6fbd",
     *         lastTriggered: "2023-02-08T23:59:28Z",
     *         createdOn: "2022-11-08T23:59:28Z"
     *     })
     */
    create(siteId: string, request: Webflow.Webhook, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.Webhook>;
    /**
     * Get a specific Webhook instance
     *
     * @param {string} webhookId - Unique identifier for a Webhook
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.webhooks.get("580e64008c9a982ac9b8b754")
     */
    get(webhookId: string, requestOptions?: Webhooks.RequestOptions): Promise<Webflow.Webhook>;
    /**
     * Remove a Webhook
     *
     * @param {string} webhookId - Unique identifier for a Webhook
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Webflow.BadRequestError}
     * @throws {@link Webflow.UnauthorizedError}
     * @throws {@link Webflow.NotFoundError}
     * @throws {@link Webflow.TooManyRequestsError}
     * @throws {@link Webflow.InternalServerError}
     *
     * @example
     *     await client.webhooks.delete("580e64008c9a982ac9b8b754")
     */
    delete(webhookId: string, requestOptions?: Webhooks.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
